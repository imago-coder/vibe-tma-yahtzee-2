declare global {
  interface Window {
    Telegram?: {
      WebApp?: {
        initDataUnsafe?: {
          user?: TelegramUser;
          start_param?: string;
        };
        ready(): void;
        expand(): void;
        close(): void;
        MainButton?: {
          text: string;
          onClick: () => void;
          show(): void;
          hide(): void;
        };
        HapticFeedback?: {
          impactOccurred: (style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft') => void;
        };
        NotificationHapticFeedback?: {
          impactOccurred: (style: 'success' | 'warning' | 'error') => void;
        };
      };
    };
  }
}

export interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Telegram Web App
export const isTelegramWebApp = (): boolean => {
  return typeof window !== 'undefined' && 
         window.Telegram?.WebApp !== undefined &&
         window.location.hostname !== 'localhost' && 
         window.location.hostname !== '127.0.0.1';
};

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
export const getTelegramUser = (): TelegramUser | null => {
  if (isTelegramWebApp() && window.Telegram?.WebApp?.initDataUnsafe?.user) {
    return window.Telegram.WebApp.initDataUnsafe.user;
  }
  return null;
};

// –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
export const getTelegramUserName = (): string => {
  const user = getTelegramUser();
  if (user) {
    if (user.last_name) {
      return `${user.first_name} ${user.last_name}`;
    }
    return user.first_name;
  }
  
  // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (typeof window !== 'undefined' && 
      (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1')) {
    return '–õ–æ–∫–∞–ª—å–Ω—ã–π –ò–≥—Ä–æ–∫';
  }
  
  return 'Player';
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
export const getTelegramFullName = (): string => {
  const user = getTelegramUser();
  if (user) {
    let fullName = user.first_name;
    if (user.last_name) {
      fullName += ` ${user.last_name}`;
    }
    if (user.username) {
      fullName += ` (@${user.username})`;
    }
    return fullName;
  }
  
  // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (typeof window !== 'undefined' && 
      (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1')) {
    return '–õ–æ–∫–∞–ª—å–Ω—ã–π –ò–≥—Ä–æ–∫ (–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞)';
  }
  
  return 'Player';
};

// –ü–æ–ª—É—á–∏—Ç—å Telegram User ID
export const getTelegramUserId = (): string | null => {
  const user = getTelegramUser();
  if (user) {
    return user.id.toString();
  }
  
  // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (typeof window !== 'undefined' && 
      (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1')) {
    return 'local-dev-' + Date.now();
  }
  
  return null;
};

// –ü–æ–ª—É—á–∏—Ç—å start_param
export const getStartParam = (): string | null => {
  if (isTelegramWebApp() && window.Telegram?.WebApp?.initDataUnsafe?.start_param) {
    return window.Telegram.WebApp.initDataUnsafe.start_param;
  }
  return null;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram Web App
export const initTelegramWebApp = (): void => {
  if (isTelegramWebApp() && window.Telegram?.WebApp) {
    try {
      window.Telegram.WebApp.ready();
      window.Telegram.WebApp.expand();
      console.log('üì± Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App:', error);
    }
  } else {
    console.log('üåê –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - Telegram Web App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
};

// Haptic feedback
export const hapticFeedback = (style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft'): void => {
  if (isTelegramWebApp() && window.Telegram?.WebApp?.HapticFeedback) {
    try {
      window.Telegram.WebApp.HapticFeedback.impactOccurred(style);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ haptic feedback:', error);
    }
  } else {
    // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log(`üì≥ Haptic feedback: ${style}`);
  }
};

// Notification feedback
export const notificationFeedback = (style: 'success' | 'warning' | 'error'): void => {
  if (isTelegramWebApp() && window.Telegram?.WebApp?.NotificationHapticFeedback) {
    try {
      window.Telegram.WebApp.NotificationHapticFeedback.impactOccurred(style);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ notification feedback:', error);
    }
  } else {
    // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log(`üîî Notification feedback: ${style}`);
  }
};
